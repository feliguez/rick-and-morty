{"version":3,"sources":["components/title/Title.jsx","components/header/Header.jsx","store/reducers/characterGetAll.reducer.js","store/actionTypes.js","store/reducers/characterGet.reducer.js","store/reducers/index.js","store/index.js","services/config.js","store/actions/getCharacter.actions.js","services/character.services.js","views/characterDetail/CharacterDetail.jsx","store/actions/getAllCharacter.actions.js","components/characterItem/CharacterItem.jsx","components/characterWrapper/CharacterWrapper.jsx","views/characters/Characters.jsx","App.js","serviceWorker.js","index.js"],"names":["Title","props","className","children","Header","id","initialState","data","loading","error","succes","errorMessage","characterGetAllReducer","prevState","action","type","payload","characterGetReducer","success","reducers","combineReducers","store","createStore","applyMiddleware","thunk","API","characterGetAsyncActionCreator","dispatch","Promise","resolve","reject","axios","get","then","response","catch","err","message","getService","successActionCreator","CharacterDetail","useDispatch","characterItem","useSelector","useEffect","match","params","Container","Row","Col","sm","Helmet","name","to","icon","faChevronLeft","Card","src","image","alt","width","ListGroup","ListGroupItem","species","status","gender","origin","location","faSpinner","pulse","size","characterGellAllAsyncActionCreator","results","characterGetAllSuccessActionCreator","CharacterItem","character","height","Body","faChevronRight","CharacterWrapper","characters","map","i","heroeIndex","key","Characters","App","path","exact","component","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8b447c87.chunk.js","sourcesContent":["import React from 'react';\nimport './Title.scss';\n\nconst Title = props => {\n  return <h2 className=\"title\">{props.children}</h2>;\n};\n\nexport default Title;\n","import React from 'react';\n\nimport Title from '../title/Title';\n\nimport './Header.css';\n\nconst Header = () => {\n  return (\n    <header id=\"header\">\n      <div className=\"container heroes heroes--container\">\n        <Title>Rick and Morty</Title>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import {\n  CHARACTER_GET_ALL_START,\n  CHARACTER_GET_ALL_SUCCESS,\n  CHARACTER_GET_ALL_ERROR\n} from '../actionTypes';\n\nconst initialState = {\n  data: [],\n  loading: false,\n  error: null,\n  succes: null,\n  errorMessage: ''\n};\n\n/**\n *\n * @param {*} prevState\n * @param {object} action\n * @param {string} action.type\n * @param {object} action.payload\n */\nconst characterGetAllReducer = (prevState = initialState, action) => {\n  switch (action.type) {\n    case CHARACTER_GET_ALL_START:\n      return {\n        ...prevState,\n        data: [],\n        loading: true\n      };\n    case CHARACTER_GET_ALL_SUCCESS:\n      return {\n        ...prevState,\n        data: action.payload,\n        succes: true,\n        error: false,\n        loading: false\n      };\n    case CHARACTER_GET_ALL_ERROR:\n      return {\n        ...prevState,\n        error: true,\n        succes: false,\n        errorMessage: action.payload,\n        loading: false\n      };\n\n    default:\n      return prevState;\n  }\n};\n\nexport default characterGetAllReducer;\n","export const CHARACTER_GET_ALL_START = 'CHARACTER_GET_ALL_START';\nexport const CHARACTER_GET_ALL_SUCCESS = 'CHARACTER_GET_ALL_SUCCESS';\nexport const CHARACTER_GET_ALL_ERROR = 'CHARACTER_GET_ALL_ERROR';\n\nexport const CHARACTER_GET_START = 'CHARACTER_GET_START';\nexport const CHARACTER_GET_SUCCESS = 'CHARACTER_GET_SUCCESS';\nexport const CHARACTER_GET_ERROR = 'CHARACTER_GET_ERROR';\n","import {\n  CHARACTER_GET_SUCCESS,\n  CHARACTER_GET_START,\n  CHARACTER_GET_ERROR\n} from '../actionTypes';\n\nconst initialState = {\n  data: null,\n  loading: false,\n  error: null,\n  succes: null,\n  errorMessage: ''\n};\n\nconst characterGetReducer = (prevState = initialState, action) => {\n  switch (action.type) {\n    case CHARACTER_GET_START:\n      return {\n        ...prevState,\n        loading: true\n      };\n\n    case CHARACTER_GET_SUCCESS:\n      return {\n        ...prevState,\n        data: action.payload,\n        loading: false,\n        error: false,\n        success: true\n      };\n\n    case CHARACTER_GET_ERROR:\n      return {\n        ...prevState,\n        loading: false,\n        error: true,\n        success: false,\n        errorMessage: action.payload\n      };\n\n    default:\n      return prevState;\n  }\n};\n\nexport default characterGetReducer;\n","import { combineReducers } from 'redux';\nimport characterGetAllReducer from './characterGetAll.reducer';\nimport characterGetReducer from './characterGet.reducer';\n\nconst reducers = combineReducers({\n  characterGetAllReducer,\n  characterGetReducer\n});\n\nexport default reducers;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\n\nconst store = createStore(reducers, applyMiddleware(thunk));\n\nexport default store;\n","export const API = 'https://rickandmortyapi.com/api';\n","import {\n  CHARACTER_GET_ERROR,\n  CHARACTER_GET_SUCCESS,\n  CHARACTER_GET_START\n} from '../actionTypes';\n\nimport { getService } from '../../services/character.services';\n\nconst startActionCreator = () => ({\n  type: CHARACTER_GET_START,\n  payload: null\n});\n\nconst successActionCreator = data => ({\n  type: CHARACTER_GET_SUCCESS,\n  payload: data\n});\n\nconst errorActionCreator = errorMessage => ({\n  type: CHARACTER_GET_ERROR,\n  payload: errorMessage\n});\n\nexport const characterGetAsyncActionCreator = id => {\n  return dispatch => {\n    dispatch(startActionCreator());\n    getService(id)\n      .then(data => {\n        dispatch(successActionCreator(data));\n      })\n      .catch(err => {\n        debugger;\n        dispatch(errorActionCreator(err));\n      });\n  };\n};\n","import axios from 'axios';\nimport { API } from './config';\n\nconst MODULE = 'character';\n\nexport const getAllService = () => {\n  return new Promise((resolve, reject) => {\n    axios\n      .get(`${API}/${MODULE}`)\n      .then(response => {\n        resolve(response.data.results);\n      })\n      .catch(err => reject(err.message));\n  });\n};\n\nexport const getService = id => {\n  return new Promise((resolve, reject) => {\n    axios\n      .get(`${API}/${MODULE}/${id}`)\n      .then(response => {\n        resolve(response.data);\n      })\n      .catch(err => reject(err.message));\n  });\n};\n","import React, { useEffect } from 'react';\nimport { Helmet } from 'react-helmet';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { characterGetAsyncActionCreator } from '../../store/actions/getCharacter.actions';\nimport { Link } from 'react-router-dom';\nimport {\n  Card,\n  Col,\n  Container,\n  ListGroup,\n  ListGroupItem,\n  Row\n} from 'react-bootstrap';\n\nimport '../../components/characterItem/CharacterItem.scss';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner, faChevronLeft } from '@fortawesome/free-solid-svg-icons';\n\nconst CharacterDetail = props => {\n  const dispatch = useDispatch();\n  const characterItem = useSelector(store => store.characterGetReducer);\n\n  useEffect(() => {\n    dispatch(characterGetAsyncActionCreator(props.match.params.id));\n  }, [dispatch, props.match.params.id]);\n\n  const { data } = characterItem;\n\n  return (\n    <Container>\n      <Row className=\"justify-content-md-center\">\n        {data ? (\n          <Col sm={4} className=\"text-left\">\n            <Helmet>\n              <title>{data.name} - Rick and Morty characters by Felipe</title>\n            </Helmet>\n            <Link to=\"/\" className=\"character-back\">\n              <FontAwesomeIcon icon={faChevronLeft} /> volver\n            </Link>\n            <Card className=\"text-left\">\n              <div className=\"card-header\">\n                <img\n                  src={data.image}\n                  alt={data.name}\n                  width=\"50\"\n                  className=\"card-img-top\"\n                />\n                <div className=\"card-title\">\n                  <h5>{data.name}</h5>\n                  <p>id: {data.id}</p>\n                </div>\n              </div>\n              <ListGroup className=\"list-group-flush\">\n                <ListGroupItem className=\"custom-list-group-item\">\n                  <span>Raza:</span> {data.species}\n                </ListGroupItem>\n                <ListGroupItem className=\"custom-list-group-item\">\n                  <span>Estado:</span> {data.status}\n                </ListGroupItem>\n                <ListGroupItem className=\"custom-list-group-item\">\n                  <span>Género:</span> {data.gender}\n                </ListGroupItem>\n                <ListGroupItem className=\"custom-list-group-item\">\n                  <span>Origen:</span> {data.origin.name}\n                </ListGroupItem>\n                <ListGroupItem className=\"custom-list-group-item\">\n                  <span>Ubicación:</span> {data.location.name}\n                </ListGroupItem>\n              </ListGroup>\n            </Card>\n          </Col>\n        ) : (\n          <FontAwesomeIcon icon={faSpinner} pulse size=\"3x\" />\n        )}\n      </Row>\n    </Container>\n  );\n};\n\nexport default CharacterDetail;\n","import {\n  CHARACTER_GET_ALL_ERROR,\n  CHARACTER_GET_ALL_START,\n  CHARACTER_GET_ALL_SUCCESS\n} from '../actionTypes';\n\nimport { getAllService } from '../../services/character.services';\n\nconst characterGetAllStartActionCreator = () => {\n  return {\n    type: CHARACTER_GET_ALL_START,\n    payload: null\n  };\n};\n\nconst characterGetAllSuccessActionCreator = data => {\n  return {\n    type: CHARACTER_GET_ALL_SUCCESS,\n    payload: data\n  };\n};\n\n/**\n *\n * @param {string} message\n */\nconst characterGetAllErrorActionCreator = message => {\n  return {\n    type: CHARACTER_GET_ALL_ERROR,\n    payload: message\n  };\n};\n\nexport const characterGellAllAsyncActionCreator = () => {\n  return dispatch => {\n    dispatch(characterGetAllStartActionCreator());\n    getAllService()\n      .then(data => {\n        dispatch(characterGetAllSuccessActionCreator(data));\n      })\n      .catch(err => {\n        debugger;\n        dispatch(characterGetAllErrorActionCreator(err));\n      });\n  };\n};\n","import { faChevronRight } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, ListGroup, ListGroupItem } from 'react-bootstrap';\nimport './CharacterItem.scss';\n\nconst CharacterItem = ({ character }) => {\n  return (\n    <Card className=\"text-left\">\n      <div className=\"card-header\">\n        <img\n          src={character.image}\n          alt={character.name}\n          width=\"300\"\n          height=\"300\"\n          className=\"card-img-top\"\n        />\n        <div className=\"card-title\">\n          <h5>{character.name}</h5>\n          <p>id: {character.id}</p>\n        </div>\n      </div>\n      <ListGroup className=\"list-group-flush\">\n        <ListGroupItem className=\"custom-list-group-item\">\n          <span>Raza:</span> {character.species}\n        </ListGroupItem>\n        <ListGroupItem className=\"custom-list-group-item\">\n          <span>Estado:</span> {character.status}\n        </ListGroupItem>\n      </ListGroup>\n      <Card.Body>\n        <Link to={`/character/${character.id}`}>\n          ver detalle <FontAwesomeIcon icon={faChevronRight} />\n        </Link>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default CharacterItem;\n","import { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { characterGellAllAsyncActionCreator } from '../../store/actions/getAllCharacter.actions';\nimport CharacterItem from '../characterItem/CharacterItem';\nimport './CharacterWrapper.css';\n\nconst CharacterWrapper = () => {\n  const dispatch = useDispatch();\n  const characters = useSelector(store => {\n    return store.characterGetAllReducer;\n  });\n\n  useEffect(() => {\n    dispatch(characterGellAllAsyncActionCreator());\n  }, [dispatch]);\n\n  const { data } = characters;\n  return characters.loading ? (\n    <div className=\"text-center\">\n      <FontAwesomeIcon icon={faSpinner} pulse size=\"3x\" />\n    </div>\n  ) : (\n    <div className=\"characters characters--container\">\n      <div className=\"container\">\n        <div className=\"card-columns\">\n          {data.map((character, i) => (\n            <CharacterItem character={character} heroeIndex={i} key={i} />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CharacterWrapper;\n","import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport CharacterWrapper from '../../components/characterWrapper/CharacterWrapper';\n\nimport './Characters.css';\n\nconst Characters = () => {\n  return (\n    <>\n      <Helmet>\n        <title>Rick and Morty characters by Felipe</title>\n      </Helmet>\n      <CharacterWrapper />\n    </>\n  );\n};\n\nexport default Characters;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport './bootstrap.css';\nimport Header from './components/header/Header';\nimport store from './store';\nimport CharacterDetail from './views/characterDetail/CharacterDetail';\nimport Characters from './views/characters/Characters';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Router>\n        <div className=\"App\">\n          <Header />\n          <Route path=\"/\" exact component={Characters} />\n          <Route path=\"/character/:id\" component={CharacterDetail} />\n        </div>\n      </Router>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}